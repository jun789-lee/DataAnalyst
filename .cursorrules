# AI Assistant Rules for DataAnalyst Project

## Primary Communication Rule
- **ALWAYS respond in Korean (한국어)** unless explicitly asked to respond in another language
- This is the default and primary language for all interactions
- Korean responses should be natural, professional, and contextually appropriate

## Git and Version Control Best Practices

### Pre-commit Checks
1. **Always verify git status** before attempting to push
2. **Ensure at least one commit exists** before pushing to remote
3. **Check remote repository state** using `git fetch` before pushing
4. **Verify branch name** matches the remote branch (main vs master)

### Git Workflow Guidelines
- Create initial commit with meaningful files (README.md, .gitignore, etc.) before first push
- Use `git pull --rebase origin main` to sync with remote before pushing
- For empty repositories, ensure local commits exist before attempting push
- Always use descriptive commit messages that explain the changes

### Error Prevention
- **Never attempt to push without local commits**: Check `git log` first
- **Handle remote conflicts proactively**: Fetch and merge before pushing
- **Use appropriate force push**: Only use `--force` when absolutely necessary and safe
- **Verify authentication**: Ensure git credentials are properly configured

## Project Setup Standards

### Initial Repository Setup
When initializing a new project:
1. Create `.gitignore` file appropriate for the project type
2. Create `README.md` with project description and setup instructions
3. Create initial commit with these essential files
4. Verify remote connection before first push
5. Use `git push -u origin main` for initial push to set upstream

### File Organization
- Keep repository root clean and organized
- Use meaningful directory structure
- Include documentation files at appropriate locations
- Maintain consistent naming conventions

## Python Environment Management

### Virtual Environment Best Practices
1. **ALWAYS detect and use virtual environments when present**
   - Check for `.venv`, `venv`, or `env` directories in the project root
   - If virtual environment exists, ALWAYS activate it before installing packages
   - Use `source .venv/bin/activate` (macOS/Linux) or `.venv\Scripts\activate` (Windows)
   
2. **Virtual Environment vs Global Installation**
   - **Virtual environments are ISOLATED**: Packages installed globally are NOT available in venv
   - **Always install packages IN the virtual environment** if one exists
   - Command pattern: `source .venv/bin/activate && pip install <package>`
   
3. **Creating Virtual Environments**
   - For new projects: `python3 -m venv .venv`
   - Add `.venv/` to `.gitignore` to exclude from version control
   - Document venv usage in README.md

### Dependency Management
1. **Always create and maintain requirements.txt**
   - List all project dependencies with version numbers
   - Update whenever new packages are installed
   - Use `pip freeze > requirements.txt` to capture current environment
   - **IMPORTANT**: Run this command INSIDE the activated virtual environment
   
2. **Check for Missing Dependencies**
   - Before running Python scripts, verify all required packages are installed
   - If `ModuleNotFoundError` occurs:
     a. Check if virtual environment is activated
     b. Install the package in the CORRECT environment
     c. Document the installation in requirements.txt

3. **Installation Best Practices**
   - **Step 1**: Check if virtual environment exists and activate it
   - **Step 2**: Install packages: `pip install <package>`
   - **Step 3**: Update requirements.txt: `pip freeze > requirements.txt`
   - Install multiple related packages together: `pip install pandas numpy matplotlib jupyter`
   - Keep track of package versions for reproducibility

### Common Python Packages for Data Analysis
Essential packages that should be in requirements.txt:
- **pandas**: Data manipulation and analysis
- **numpy**: Numerical computing
- **matplotlib**: Data visualization
- **jupyter**: Interactive notebooks
- **jupyterlab**: Modern Jupyter interface
- **ipykernel**: Jupyter kernel support
- **seaborn**: Statistical visualization (optional)
- **scikit-learn**: Machine learning (optional)

### Jupyter Notebook with Virtual Environments
**CRITICAL**: Jupyter notebooks require special setup with virtual environments

1. **Install Jupyter in the virtual environment**
   ```bash
   source .venv/bin/activate
   pip install jupyter jupyterlab ipykernel
   ```

2. **Register virtual environment as Jupyter kernel**
   ```bash
   source .venv/bin/activate
   python -m ipykernel install --user --name=<project-name> --display-name="Python (<Project>)"
   ```

3. **Verify kernel installation**
   ```bash
   jupyter kernelspec list
   ```

4. **In Jupyter Notebook: ALWAYS select the correct kernel**
   - Click kernel selector (top right in notebook)
   - Choose the kernel matching your virtual environment
   - **Common mistake**: Using default Python3 kernel instead of project-specific kernel

5. **Troubleshooting ModuleNotFoundError in Notebooks**
   - Problem: Packages installed but notebook can't find them
   - Cause: Notebook is using wrong kernel (not the venv kernel)
   - Solution: Change kernel to virtual environment kernel OR install in notebook cell with `!pip install <package>`

### Error Prevention
- **Before executing Python code**: 
  1. Check if virtual environment exists
  2. Activate virtual environment if present
  3. Verify required packages are installed IN that environment
- **When creating new notebooks**: 
  1. Verify kernel matches the virtual environment
  2. Check kernel has access to required packages
  3. Test imports in first cell before proceeding
- **After fresh clone**: 
  1. Create virtual environment: `python3 -m venv .venv`
  2. Activate it: `source .venv/bin/activate`
  3. Install dependencies: `pip install -r requirements.txt`
  4. Register Jupyter kernel if using notebooks
- **Document Python version**: Include Python version requirements in README
- **Add PATH if needed**: `export PATH="$HOME/Library/Python/3.9/bin:$PATH"`

### Quick Environment Check Commands
```bash
# Check which Python is being used
which python

# Check if virtual environment is activated (should show .venv path)
echo $VIRTUAL_ENV

# List installed packages in current environment
pip list

# Verify specific package installation
pip show pandas
```

## Code Quality and Maintenance

### Before Making Changes
- Understand the current state of the repository
- Check for existing patterns and conventions
- Review recent changes and commit history
- **Verify Python environment and dependencies are installed**

### When Creating Files
- Use appropriate file extensions and naming
- Include necessary headers and documentation
- Follow language-specific best practices
- Ensure files are added to git tracking
- **For Python files: Add import statements and verify packages are available**

## Communication Standards

### Response Format
- Provide clear, actionable solutions
- Include command examples when relevant
- Explain WHY certain actions are recommended
- Anticipate potential follow-up issues
- Use Korean language naturally and professionally

### Error Handling
- Analyze errors thoroughly before suggesting solutions
- Provide multiple solution options when applicable
- Explain the root cause of issues
- Include prevention strategies for future occurrences

## Tool Usage Optimization

### Terminal Commands
- Verify current directory before executing commands
- Use appropriate flags for non-interactive execution
- Check command success/failure and handle accordingly
- Provide context for why commands are being executed

### File Operations
- Read existing files before making modifications
- Preserve formatting and style consistency
- Use appropriate tools for different operations
- Verify changes after completion

## Proactive Assistance

### Anticipate Needs
- Suggest related improvements when making changes
- Identify potential issues before they occur
- Recommend best practices relevant to the task
- Provide comprehensive solutions, not just minimal fixes

### Documentation
- Create helpful README files for new projects
- Document setup procedures and requirements
- Include usage examples and common workflows
- Maintain up-to-date project documentation

---

**Remember**: The primary goal is to provide helpful, accurate, and proactive assistance while communicating clearly in Korean and following software development best practices.

